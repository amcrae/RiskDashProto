<h1>Plant</h1>
<!-- Find me in app/views/plant/index.html.erb -->
<p></p>

<script>
		// Example POST method implementation:
		async function sendData(method = "GET", url = "", data = null) {
		  // Default options are marked with *
		  foptions = {
		    method: method, // *GET, POST, PUT, DELETE, etc.
		    mode: "same-origin", // no-cors, *cors, same-origin
		    cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
		    credentials: "same-origin", // include, *same-origin, omit
		    headers: {
		      "Content-Type": "application/json",
		      // 'Content-Type': 'application/x-www-form-urlencoded',
		    },
		    redirect: "follow", // manual, *follow, error
		    referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
		  };
		  if (data!=null) {
		    foptions.body = JSON.stringify(data); // body data type must match "Content-Type" header
		  }
		  const response = await fetch(url, foptions);
		  if (response.bodyUsed) return response.json(); // parses JSON response into native JavaScript objects
		  return null;
		}

		/* 
		postData("https://example.com/answer", { answer: 42 }).then((data) => {
		  console.log(data); // JSON data parsed by `data.json()` call
		});
		*/
		
	  function sabotage(asset_id) {
	    sendData("POST", "/plant/sabotage", {asset_id: asset_id} ).then( 
	      (data) => {
	      	  console.log(data);
	      }
	    );
	  }
	  
	  var update_seg_status_elem = function(seg) {
	     e = document.getElementById("seg_status_"+seg.id);
	     if (e == null) return;
	     e.textContent = seg.operational;
	     if (seg.operational == 'RUNNING') {
	        e.className = 'stat_running';
	     } else {
	        e.className = 'stat_offline';
	     }
	  }
	  
	  function update_tree_statuses(data) {
        for (const seg_status of data) {
          update_seg_status_elem(seg_status);
        }
	  }
  
</script>

<div id="layout1">

 <div id="row1" class="sidebyside">

	<div id="segment_tree">
	<h3>Plant Breakdown Structure</h3>
	 <% @seg_tree.each do | pair | 
	    seg = pair[:seg];
	    asset = pair[:asset];
	 %>
	 <div data-path="<%= seg.path %>">
	 <table><tr>
	  <td> <span class="tree_indent" style="margin-left:<%= (1.2 * (seg.level-1)).round(1) %>em;">┣</span> 
	  <td><%= link_to("#"+seg.id.to_s(), segment_path(seg))%> 
	  <td><%= seg.segtype %> 
	  <td><%= seg.shortname %> 
	  <!-- <td>^<%= seg.parent_id %> -->
	  <% stat_class = if seg.operational == 'RUNNING' then 'stat_running' else 'stat_offline' end %>
	  <td><span id="seg_status_<%=seg.id %>" class="<%=stat_class%>"> <%= seg.operational %> </span>
	  <td>
	  <% if asset != nil then %>
	   <%= render partial: "asset_status/show", locals: { asset: asset, asset_id: seg.asset_id } %>
	  <% end %>
	  </tr>
	  </table>
	 </div>
	 <% end %>

	</div>

	<div id="diagram_pane">
	<h3>Diagram</h3>
	<object id="engdiagram" data="<%= image_path('PumpingSubsystem.svg')%>" type="image/svg+xml">
	  <!-- <img src="yourfallback.jpg" /> -->
	</object>
	</div>

 </div>

 <div id="row2" class="sidebyside">
 <div id="risk_pane">
  .
 </div>
 
 <div id="live_data_pane">
	<h3>Live Data (synthetic)</h3>
	<script>
	var job_launched = false;

	var chart_data = {
	}
	
	function get_chart_arrays_for(mloc_id) {
	  if (!(mloc_id in chart_data)) {
		var init = {
		  x:[ ],
		  y:[ ]
		};
		chart_data[mloc_id] = init;
	  } 
	  return chart_data[mloc_id]
	}
	  
	function start_data_thread() {
	    if (job_launched) return false;
 	    chart_data = { };
	    update = {x:[ ], y:[ ]};
	    Plotly.update('measurementDiv1', update);
	    sendData("GET", "/synth/restart_synth", null).then( 
	      (data) => {
	      	  console.log("restart responded "+data);
	      	  job_launched = true;
	      }
	    );

	}

	function reenable_launch() {
	  document.getElementById("synth_launcher").style.display = 'inline';
	  job_launched = false;
	  launch_timeout_id = null;
	}

	var launch_timeout_id = null;
	
	function append_plot_data(datum) {
	  job_launched = true;
	  document.getElementById("synth_launcher").style.display = 'none';
	  if (launch_timeout_id) clearTimeout(launch_timeout_id);
	  launch_timeout_id = setTimeout(() => {
	    reenable_launch();
	  }, 11000);

	  var now = new Date();
	  var time = new Date; time.setTime(Date.parse(datum.timestamp));
	  var series_data = get_chart_arrays_for(datum["m_location_id"]);
	  if (series_data.x.length>60) {
	    series_data.x.splice(0,1);
	    series_data.y.splice(0,1);
	  } 
	  series_data.x.push(time);
	  series_data.y.push(datum.v);
	  update = {x:[series_data.x], y:[series_data.y]};
	  Plotly.update('measurementDiv1', update);
	}
	</script>
	
 	<div style="text-align:right; margin-right:0; "> 
 	  <span style="font-size:larger;">✇</span><a id="synth_launcher" href="#restart" onclick="start_data_thread(); return false;" style="">⏯ Start synthesis task</a></div>
	<div id="measurementDiv1"></div>
	<script>

	var m1 = [{
	  x: [ ],
	  y: [ ],
	  mode: 'lines',
	  line: {color: '#80CAF6'}
	}]
	Plotly.newPlot('measurementDiv1', m1);
	</script>
 
  </div>
 </div>

</div>

